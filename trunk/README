INTRODUCTION
------------

The TAPs for Topfield PVRs project at BerliOS has been established
to promote collaboration among developers of TAPs. This document
explains some of the finer points of the project and is aimed at
active participants - i.e. developers who wish to share their work.


LICENSE
-------

All materials forming part of this project must be released under
an Open Source License. Please consult http://www.opensource.org/
for the definition of Open Source and a list of suitable licenses.

The default Open Source License for this project is GPL version 2
and will apply to any material that fails to explicitly specify an
alternative Open Source License.


SUB-PROJECTS
------------

Creation of TAPs is a classic case of cross development. The TAP
is written, compiled and linked on a host system, then transferred
and executed on the target system. In this case, the target is a
Topfield TF5xxx PVR and the host is generally a PC with Cygwin.

There are several different subprojects:

 * tools - Developer programs designed to execute on the host
           system. These will generally be used to assist in the
	   development of TAPs and can range from debuggers to
	   data conversion utilities.
 * libs  - Reusable code libraries that can be shared among many
           TAPs. Examples include configuration file parsing or
	   OSD graphics routines.
 * taps  - The TAPs themselves.
 * host  - End user programs designed to execute on a host system.
           Items such as client applications for TAPs belong here.
	   There are sub-directories for specific platforms.


PROJECT RULES AND CODING STANDARDS
----------------------------------

Most projects have rules and coding standards that developers must
adhere to. These can range from prescribed source code formatting
to requiring developers to have all changes reviewed by peers.

This project also has rules and standards, but these are designed
to allow developers the maximum amount of freedom while still
making their efforts useful for everyone else.

Here are some recommendations in no particular order:

* Document your contribution in English.
  Adding documentation in the form of source code comments and
  README files will allow others to understand the purpose of your
  work. Even if English is not your native language, please try
  to provide an English version. It is easier to fix up spelling
  and grammatical errors than to work without any documentation
  at all. Additional documentation in other languages is always
  welcome.

  Source code comments are sometime more valuable than the code
  itself. Good comments will explain what the code should be doing
  when it is working properly. If your code has a bug or is not
  finished, others will be able to understand what the code needs
  to be doing and will be in a position to help.

* Contribute early and often.
  Development tends to progress faster when many people are looking
  at the same problem. Add your contribution in it's early stages
  and make your changes available as soon as possible.

* Don't break things.
  You don't want to make life difficult for others, so if you are
  going to change code that used to compile, make sure it still
  compiles after your changes are committed. If you are changing
  libraries used by other subprojects, either update the code in
  those dependent subprojects or make sure that the maintainers
  of those projects are aware of upcoming changes and have enough
  information to make appropriate changes.

  A good way of managing subproject dependencies and minimising
  the breakages is to make use of branches and tags. If you are
  planning changing things that could potentially break things,
  or are unsure how to effectively manage dependencies, please
  talk to the Project Admins (listed in the project summary page)
  about how to manage this process.

